Exemplo - https://rednuht.org/genetic_cars_2/

AG
	- método de busca heurística
	- tipo de problema com muitas restrições (ifs) e sem o conhecimento do estado final
	- produz estados como os métodos de busca tradicionais, entretanto, a produção/geração não é linear,
	  mas sim paralelo (como se fosse um vetor/lista).... a cada geração um AG pode produzir/gerar N estados novos
	- método de busca 'turbinado' com aleatoriedade controlada.... maior chute da paróquia

AG 
	- baseado na teoria da evolução Charles Darwin
		- método de seleção natural (os mais aptos ou os mais perto da solução ou os com menos restrições feridas 
		  irão passar para a próxima geração)
		- método de cruzamento/crossover.... vai eleger dois estados para cruzarem/reproduzirem -> METODO QUE CRIA INDIVIDUOS
		- método mutação -> MÉTODO QUE CRIA INDIVIDUOS A PARTIR DA ALTERAÇÃO DE OUTRO
		- elitismo -> tem relação com a seleção, ou seja, o melhor indivíduo sempre é selecionado para a próxima geração

Problema: Geração de palavras em evolução até chegar numa palavra estado final

Entradas:
	- tamanhoPopulacao
	- quantidadeGeracoes
	- taxaSelecao / taxaReproducao
	- taxaMutacao
	- neste caso em especial, palavraFinal

1) Pensar Orientado a Objetos
	- Criar a classe Cromossomo (representa um estado ou um indivíduo)
		- atributos
		- construtor
		- cálculo de aptidão (heurística) -> 'pulo do gato'

	- Criar uma classe Util como métodos utilitários ao problema

	- Criar uma classe para aplicar o AG
		- tamanhoPopulacao
		- quantidadeGeracoes
		- taxaSelecao / taxaReproducao
		- taxaMutacao
		- neste caso em especial, palavraFinal	

		inicializarPopulacao(populacao,tamanhoPopulacao,palavraFinal)
		ordenarPopulacao(populacao) //decrescente pela aptidao
		exibirPopulacao(populacao)

		laço 1 até quantidadeGeracoes
			selecionarPopulacao(populacao,novaPopulacao,taxaSelecao)
			reproduzirPopulacao(populacao,novaPopulacao,taxaReproducao,palavraFinal)
			
			mutarPopulacao(novaPopulacao,palavraFinal) //verificar a taxa ou a frequencia
			ordenarPopulacao(novaPopulacao)
			exibirPopulacao(novaPopulacao)

			apagar(populacao)
			mover(novaPopulacao,populacao)
			apagar(novaPopulacao)

Curiosidades:
	1) muita lista
	2) muito Random -> AG é o maior algoritmo de aleatoriedade da PARÓQUIA, só que controlado
	3) regra de 3
	4) orientação a objetos
			







